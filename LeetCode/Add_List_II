/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

static int desyncio = []() {
    std::ios::sync_with_stdio(false);
    cin.tie(NULL);
    return 0;
}();


int listSize(ListNode* head){
    ListNode* temp = head;
    int listLen = 0;
    
    while(temp!=NULL){
        temp = temp->next;
        ++listLen;
    }
    
    return listLen;
}

ListNode* addList(ListNode* l1, ListNode* l2){
    
    if(!l1 && !l2){
        return NULL;
    }
    
    ListNode* prevRecNode = addList(l1->next, l2->next);
    int curVal = l1->val+l2->val;
    
    if(prevRecNode && prevRecNode->val > 9){
        curVal +=1;
        prevRecNode->val %= 10;
    }
    
    ListNode* curNode = new ListNode(curVal);
    curNode->next = prevRecNode;
    
    return curNode;
}


class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *temp1=l1,*temp2=l2;
        
        int len1 = listSize(l1);
        int len2 = listSize(l2);
        
        //cout<<len1<<" "<<len2;
        
        if(len1>len2){
            for(int i=len2;i<len1;++i){
                ListNode* tempNode = new ListNode(0);
                tempNode->next = l2;
                l2 = tempNode;
            }
        }
        else{
            for(int i=len1;i<len2;++i){
                ListNode* tempNode = new ListNode(0);
                tempNode->next = l1;
                l1 = tempNode;
            }
        }
        
        ListNode* resList = addList(l1,l2);
        
        if(resList && resList->val>9){
            ListNode* carryHead = new ListNode(1);
            carryHead->next = resList;
            resList->val %= 10;
            resList = carryHead;
        }
        
        return resList;
    }
};
